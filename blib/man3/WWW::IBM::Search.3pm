.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "WWW::IBM::Search 3"
.TH WWW::IBM::Search 3 "2010-03-20" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
WWW::IBM::Search \- API to IBM Search
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
WWW::IBM::Search is an \s-1API\s0 to <http://www.ibm.com/search/?v=14&realm=ibm&cc=us&lang=en&adv.x=1&en=utf&q=foo>
.PP
.Vb 1
\&    use WWW::IBM::Search;
\&
\&    my $ibm = WWW::IBM::Search\->new(
\&                where           =>      \*(AqUnited States\*(Aq,
\&                language        =>      \*(AqEnglish\*(Aq,
\&                display         =>      25,
\&        ;
\&    my $results = $ibm\->search(\*(Aq+perl +developerworks\*(Aq);
\&    foreach my $result (@{ $results }) {
\&        print $result\->{\*(Aqtitle\*(Aq},"\et", print $result\->{\*(Aquri\*(Aq},"\en";
\&    }
\&    ...
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
Returns a new WWW::IBM::Search search object.
Here are the parameters:
.IP "\(bu" 5
where => 'country' (default is 'United States')
.Sp
You can specify in which \s-1IBM\s0 the search will be performed. The following IBMs are available:
.Sp
.Vb 10
\&        Worldwide
\&        Anguilla
\&        Antigua and Barbuda
\&        Argentina
\&        Aruba
\&        Australia
\&        Austria
\&        Bahamas
\&        Bahrain
\&        Bangladesh
\&        Barbados
\&        Belgium
\&        Bermuda
\&        Bolivia
\&        Brazil
\&        British
\&        Bulgaria
\&        Canada
\&        Cayman Islands
\&        Chile
\&        China
\&        Colombia
\&        Croatia
\&        Cyprus
\&        Czech Republic
\&        Denmark
\&        Dominica
\&        Ecuador
\&        Egypt
\&        Estonia
\&        Finland
\&        France
\&        Germany
\&        Greece
\&        Grenada
\&        Guyana
\&        Hong Kong
\&        Hungary
\&        India
\&        Indonesia
\&        Ireland
\&        Israel
\&        Italy
\&        Jamaica
\&        Japan
\&        Jordan
\&        Korea, Republic of
\&        Kuwait
\&        Latvia
\&        Lebanon
\&        Lithuania
\&        Malaysia
\&        Mexico
\&        Montserrat
\&        Netherlands
\&        Netherlands Antilles
\&        New Zealand
\&        Norway
\&        Oman
\&        Pakistan
\&        Paraguay
\&        Peru
\&        Philippines
\&        Poland
\&        Portugal
\&        Qatar
\&        Romania
\&        Russian Federation
\&        Saint Kitts and Nevis
\&        Saint Lucia
\&        Saint Vincent and the Grenadines
\&        Saudi Arabia
\&        Serbia
\&        Singapore
\&        Slovakia
\&        Slovenia
\&        South Africa
\&        Spain
\&        Sri Lanka
\&        Suriname
\&        Sweden
\&        Switzerland
\&        Taiwan
\&        Thailand
\&        Trinidad and Tobago
\&        Turkey
\&        Turks and Caicos Islands
\&        Ukraine
\&        United Arab Emirates
\&        United Kingdom
\&        United States
\&        Uruguay
\&        Venezuela
\&        Viet Nam
\&        Virgin Islands
.Ve
.IP "\(bu" 5
language => \*(L"language\*(R"  (default is 'English')
.Sp
Your language:
.Sp
.Vb 10
\&        Any
\&        Bulgarian
\&        ChineseS (simplified)
\&        ChineseT (traditional)
\&        Croatian
\&        Czech
\&        Danish
\&        Dutch
\&        English
\&        Estonian
\&        Finnish
\&        French
\&        German
\&        Greek
\&        Hebrew
\&        Hungarian
\&        Italian
\&        Japanese
\&        Korean
\&        Latvian
\&        Lithuanian
\&        Norwegian
\&        Polish
\&        Portuguese
\&        Romanian
\&        Russian
\&        Slovak
\&        Slovenian
\&        Spanish
\&        Swedish
\&        Turkish
\&        Ukrainian
.Ve
.IP "\(bu" 5
display => number (default is 100)
.Sp
The number of results per page:
.Sp
.Vb 5
\&        10
\&        25
\&        50
\&        75
\&        100
.Ve
.IP "\(bu" 5
fetch_all => [0|1] (default is 0)
.Sp
Traverses all the result's pages before returning.
.IP "\(bu" 5
how => \*(L"how\*(R" (default is 'all of the words')
.Sp
.Vb 3
\&        all
\&        any
\&        phrase
.Ve
.SS "search"
.IX Subsection "search"
Before you search, please read the documentaion <http://www.ibm.com/search/help/us/en/#improve>
.PP
Pass the string to search, and, this function will return an array ref, where each element is a result hash (see below).
.PP
.Vb 1
\&    my $results = $ibm\->search(\*(Aq+perl +developerworks\*(Aq);
\&
\&    foreach my $result (@{ $results }) {
\&        say $result\->{\*(Aqtitle\*(Aq};
\&        say $result\->{\*(Aquri\*(Aq};
\&        say $result\->{\*(Aqcontent_text\*(Aq};
\&    }
.Ve
.PP
The attributes below show the information available to you on each query.
.SS "title"
.IX Subsection "title"
.Vb 1
\&    print $result\->{\*(Aqtitle\*(Aq}
.Ve
.PP
The title name from result.
.SS "uri"
.IX Subsection "uri"
.Vb 1
\&    print $result\->{\*(Aquri\*(Aq}
.Ve
.PP
The uri from result.
.SS "content_text"
.IX Subsection "content_text"
.Vb 1
\&    print $result\->{\*(Aqcontent_text\*(Aq}
.Ve
.PP
The content as text from result.
.SS "content_html"
.IX Subsection "content_html"
.Vb 1
\&    print $result\->{\*(Aqcontent_html\*(Aq}
.Ve
.PP
The content as \s-1HTML\s0 from result.
.SS "html"
.IX Subsection "html"
.Vb 1
\&    print $result\->{\*(Aqhtml\*(Aq}
.Ve
.PP
The literal \s-1HTML\s0 from result.
.SH "AUTHOR"
.IX Header "AUTHOR"
Daniel de Oliveira Mantovani, \f(CW\*(C`<daniel.oliveira.mantovani at gmail.com>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-www\-ibm at rt.cpan.org\*(C'\fR, or through
the web interface at <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=WWW\-IBM\-Search>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc WWW::IBM::Search
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT:\s0 \s-1CPAN\s0's request tracker
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=WWW\-IBM\-Search>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/WWW\-IBM\-Search>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/WWW\-IBM\-Search>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/WWW\-IBM\-Search/>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Breno G. Oliveira   <garu>
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2010 Daniel de Oliveira Mantovani.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of either: the \s-1GNU\s0 General Public License as published
by the Free Software Foundation; or the Artistic License.
.PP
See http://dev.perl.org/licenses/ for more information.
